//Инициализация и удаление объектов
#include "usertype.h"
#include "uclasses.h"
#include "uobjects.h"

_TMNMRI *_TK13_MRI;
_TMNMRI *_TH13S15_MRI;
_TMNMRI *_RL52_MRI;
_TMNMRI *_TH13S18_MRI;
_TMNMRI *_RA12_MRI;
_TMNMRI *_TP60_MRI;
_TKPIM *_RA12_KPIM;
_TKPIM *_TP60S05_KPIM;
_TKPIM *_TK13_KPIM;
_TKPIM *_TH13S15_KPIM;
_TKPIM *_RL52_KPIM;
_TKPIM *_TH13S18_KPIM;
_TAF *_TH13S15_AF;
_TAF *_D14MC2_76_AF;
_TAF *_TH13S18_AF;
_TAF *_D14MC2_79_AF;
_TAF *_TK13J02_AF;
_TAF *_YA12T767_AF;
_TAF *_YA12T779_AF;
_TAF *_RL52S03_AF;
_TAF *_T118B0_AF;
_TAF *_RA12S04_AF;
_TAF *_TP60S05_AF;
_TAF *_T073B03_AF;
_TAF *_Y067B20_AF;
_TAF *_TH13T154_AF;
_TAF *_T651P01_AF;
_TOffDelay *_TH13_OffD;
_TOffDelay *_TK13_OffD;
_TOffDelay *_RA12_OffD;
_TOffDelay *_RL52_OffD;
_TSTrigger *_TH15_Str;
_TLVR *_TH13S15_LVR;
_TOnDelay *_TH13_OnD;
_TSTrigger *_TH18_Str;
_TLVR *_TH13S18_LVR;
_TOnDelay *_TH13_OnD2;
_TLFUKN *_TH13_LFU;
_TButtonState *_TH13BUT;
_TAR1 *_TH13S15_AR;
_TMIMKD *_TH13S15_MIM;
_TAR1 *_TH13S18_AR;
_TMIMKD *_TH13S18_MIM;
_TSTrigger *_TK13_Str1;
_TLVR *_TK13_LVR;
_TLFUKN *_TK13_LFU;
_TLFUKN *_TK13_LFUS;
_TSTrigger *_TK13_STr;
_TOnDelay *_TK13_OnD;
_TOnDelay *_TK13_OnD2;
_TSR1 *_TK13_SR;
_TAR1 *_TK13_AR;
_TMinHyst *_TK13_MH;
_TMIMKD *_TK13_MIM;
_TSTrigger *_RA12_Str;
_TLVR *_RA12_LVR;
_TLFUKN *_RA12_LFU;
_TMinHyst *_RA12_MnH;
_TButtonState *_RA12_BtSt;
_TMaxHyst *_RA12_MxH2;
_TAR1 *_RA12_AR;
_TMIMKD *_RA12_MIM;
_TETrigger *_RA12OT_Etr;
_TSTrigger *_RA12_STr1;
_TSPulse *_RA12_SPls;
_TSTrigger *_RL52_Str1;
_TLVR *_RL52_LVR;
_TLFUKN *_RL52_LFU;
_TSTrigger *_RL52_STr2;
_TOnDelay *_RL52_OnD;
_TSPulse *_RL52_SP;
_TSTrigger *_RL52_STr;
_TSR1 *_RL52_SR;
_TMIMKD *_RL52_MIM;
_TOCHK *_TK13_OCHK;
_TOCHK *_RA12_OCHK;
_TOCHK *_RL52_OCHK;
_TOCHK *_TH13S15_OCHK;
_TOCHK *_TH13S18_OCHK;
_TMNMRO *_TK13_MRO;
_TMNMRO *_RL52_MRO;
_TMNMRO *_TH13S15_MRO;
_TMNMRO *_RA12_MRO;
_TMNMRO *_TH13S18_MRO;
_TMNMRO *_TP60_MRO;
void InitObjects()
{
  _TK13_MRI = new(_TMNMRI);
  _TH13S15_MRI = new(_TMNMRI);
  _RL52_MRI = new(_TMNMRI);
  _TH13S18_MRI = new(_TMNMRI);
  _RA12_MRI = new(_TMNMRI);
  _TP60_MRI = new(_TMNMRI);
  _RA12_KPIM = new _TKPIM(false,false);
  _TP60S05_KPIM = new _TKPIM(false,false);
  _TK13_KPIM = new _TKPIM(false,false);
  _TH13S15_KPIM = new _TKPIM(false,false);
  _RL52_KPIM = new _TKPIM(false,false);
  _TH13S18_KPIM = new _TKPIM(false,false);
  _TH13S15_AF = new _TAF(false,0);
  _D14MC2_76_AF = new _TAF(false,0);
  _TH13S18_AF = new _TAF(false,0);
  _D14MC2_79_AF = new _TAF(false,0);
  _TK13J02_AF = new _TAF(false,0);
  _YA12T767_AF = new _TAF(false,0);
  _YA12T779_AF = new _TAF(false,0);
  _RL52S03_AF = new _TAF(false,0);
  _T118B0_AF = new _TAF(false,0);
  _RA12S04_AF = new _TAF(false,0);
  _TP60S05_AF = new _TAF(false,0);
  _T073B03_AF = new _TAF(false,0);
  _Y067B20_AF = new _TAF(false,0);
  _TH13T154_AF = new _TAF(false,0);
  _T651P01_AF = new _TAF(false,0);
  _TH13_OffD = new _TOffDelay(0,false);
  _TK13_OffD = new _TOffDelay(0,false);
  _RA12_OffD = new _TOffDelay(0,false);
  _RL52_OffD = new _TOffDelay(0,false);
  _TH15_Str = new _TSTrigger(false);
  _TH13S15_LVR = new _TLVR(false,0,0,false,0,false,false,false,false,false,false,0);
  _TH13_OnD = new _TOnDelay(0,false);
  _TH18_Str = new _TSTrigger(false);
  _TH13S18_LVR = new _TLVR(false,0,0,false,0,false,false,false,false,false,false,0);
  _TH13_OnD2 = new _TOnDelay(0,false);
  _TH13_LFU = new _TLFUKN(0,false,false,0,0,0,false,false);
  _TH13BUT = new _TButtonState(false,false);
  _TH13S15_AR = new _TAR1(0,0,0,false,false,0,0,0,0,false,false,false,false,false,false,0,0,0,0,0,0,0,0,false,
    0,0);
  _TH13S15_MIM = new _TMIMKD(false,0,false,0,0,0,false,0);
  _TH13S18_AR = new _TAR1(0,0,0,false,false,0,0,0,0,false,false,false,false,false,false,0,0,0,0,0,0,0,0,false,
    0,0);
  _TH13S18_MIM = new _TMIMKD(false,0,false,0,0,0,false,0);
  _TK13_Str1 = new _TSTrigger(false);
  _TK13_LVR = new _TLVR(false,0,0,false,0,false,false,false,false,false,false,0);
  _TK13_LFU = new _TLFUKN(0,false,false,0,0,0,false,false);
  _TK13_LFUS = new _TLFUKN(0,false,false,0,0,0,false,false);
  _TK13_STr = new _TSTrigger(false);
  _TK13_OnD = new _TOnDelay(0,false);
  _TK13_OnD2 = new _TOnDelay(0,false);
  _TK13_SR = new _TSR1(false,false,false,false,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,false,0,0,0,0,0,0,0,
    0,0,0,false,false,false,0,0,0,0,false,false,false,false,false,false,0,0,0,0,0,0,0,0,0,false,0,0);
  _TK13_AR = new _TAR1(0,0,0,false,false,0,0,0,0,false,false,false,false,false,false,0,0,0,0,0,0,0,0,false,0,
    0);
  _TK13_MH = new _TMinHyst(false,false);
  _TK13_MIM = new _TMIMKD(false,0,false,0,0,0,false,0);
  _RA12_Str = new _TSTrigger(false);
  _RA12_LVR = new _TLVR(false,0,0,false,0,false,false,false,false,false,false,0);
  _RA12_LFU = new _TLFUKN(0,false,false,0,0,0,false,false);
  _RA12_MnH = new _TMinHyst(false,false);
  _RA12_BtSt = new _TButtonState(false,false);
  _RA12_MxH2 = new _TMaxHyst(false,false);
  _RA12_AR = new _TAR1(0,0,0,false,false,0,0,0,0,false,false,false,false,false,false,0,0,0,0,0,0,0,0,false,0,
    0);
  _RA12_MIM = new _TMIMKD(false,0,false,0,0,0,false,0);
  _RA12OT_Etr = new _TETrigger(false);
  _RA12_STr1 = new _TSTrigger(false);
  _RA12_SPls = new _TSPulse(0,false);
  _RL52_Str1 = new _TSTrigger(false);
  _RL52_LVR = new _TLVR(false,0,0,false,0,false,false,false,false,false,false,0);
  _RL52_LFU = new _TLFUKN(0,false,false,0,0,0,false,false);
  _RL52_STr2 = new _TSTrigger(false);
  _RL52_OnD = new _TOnDelay(0,false);
  _RL52_SP = new _TSPulse(0,false);
  _RL52_STr = new _TSTrigger(false);
  _RL52_SR = new _TSR1(false,false,false,false,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,false,0,0,0,0,0,0,0,
    0,0,0,false,false,false,0,0,0,0,false,false,false,false,false,false,0,0,0,0,0,0,0,0,0,false,0,0);
  _RL52_MIM = new _TMIMKD(false,0,false,0,0,0,false,0);
  _TK13_OCHK = new _TOCHK(0,0,0,0,0,0,0,0,0,0,0,0,0,0,false);
  _RA12_OCHK = new _TOCHK(0,0,0,0,0,0,0,0,0,0,0,0,0,0,false);
  _RL52_OCHK = new _TOCHK(0,0,0,0,0,0,0,0,0,0,0,0,0,0,false);
  _TH13S15_OCHK = new _TOCHK(0,0,0,0,0,0,0,0,0,0,0,0,0,0,false);
  _TH13S18_OCHK = new _TOCHK(0,0,0,0,0,0,0,0,0,0,0,0,0,0,false);
  _TK13_MRO = new(_TMNMRO);
  _RL52_MRO = new(_TMNMRO);
  _TH13S15_MRO = new(_TMNMRO);
  _RA12_MRO = new(_TMNMRO);
  _TH13S18_MRO = new(_TMNMRO);
  _TP60_MRO = new(_TMNMRO);
}
void DeleteObjects()
{
  delete(_TK13_MRI);
  delete(_TH13S15_MRI);
  delete(_RL52_MRI);
  delete(_TH13S18_MRI);
  delete(_RA12_MRI);
  delete(_TP60_MRI);
  delete(_RA12_KPIM);
  delete(_TP60S05_KPIM);
  delete(_TK13_KPIM);
  delete(_TH13S15_KPIM);
  delete(_RL52_KPIM);
  delete(_TH13S18_KPIM);
  delete(_TH13S15_AF);
  delete(_D14MC2_76_AF);
  delete(_TH13S18_AF);
  delete(_D14MC2_79_AF);
  delete(_TK13J02_AF);
  delete(_YA12T767_AF);
  delete(_YA12T779_AF);
  delete(_RL52S03_AF);
  delete(_T118B0_AF);
  delete(_RA12S04_AF);
  delete(_TP60S05_AF);
  delete(_T073B03_AF);
  delete(_Y067B20_AF);
  delete(_TH13T154_AF);
  delete(_T651P01_AF);
  delete(_TH13_OffD);
  delete(_TK13_OffD);
  delete(_RA12_OffD);
  delete(_RL52_OffD);
  delete(_TH15_Str);
  delete(_TH13S15_LVR);
  delete(_TH13_OnD);
  delete(_TH18_Str);
  delete(_TH13S18_LVR);
  delete(_TH13_OnD2);
  delete(_TH13_LFU);
  delete(_TH13BUT);
  delete(_TH13S15_AR);
  delete(_TH13S15_MIM);
  delete(_TH13S18_AR);
  delete(_TH13S18_MIM);
  delete(_TK13_Str1);
  delete(_TK13_LVR);
  delete(_TK13_LFU);
  delete(_TK13_LFUS);
  delete(_TK13_STr);
  delete(_TK13_OnD);
  delete(_TK13_OnD2);
  delete(_TK13_SR);
  delete(_TK13_AR);
  delete(_TK13_MH);
  delete(_TK13_MIM);
  delete(_RA12_Str);
  delete(_RA12_LVR);
  delete(_RA12_LFU);
  delete(_RA12_MnH);
  delete(_RA12_BtSt);
  delete(_RA12_MxH2);
  delete(_RA12_AR);
  delete(_RA12_MIM);
  delete(_RA12OT_Etr);
  delete(_RA12_STr1);
  delete(_RA12_SPls);
  delete(_RL52_Str1);
  delete(_RL52_LVR);
  delete(_RL52_LFU);
  delete(_RL52_STr2);
  delete(_RL52_OnD);
  delete(_RL52_SP);
  delete(_RL52_STr);
  delete(_RL52_SR);
  delete(_RL52_MIM);
  delete(_TK13_OCHK);
  delete(_RA12_OCHK);
  delete(_RL52_OCHK);
  delete(_TH13S15_OCHK);
  delete(_TH13S18_OCHK);
  delete(_TK13_MRO);
  delete(_RL52_MRO);
  delete(_TH13S15_MRO);
  delete(_RA12_MRO);
  delete(_TH13S18_MRO);
  delete(_TP60_MRO);
}
